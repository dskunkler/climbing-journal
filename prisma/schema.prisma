generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model MacroCycle {
  id          String       @id @default(cuid())
  start       DateTime
  end         DateTime
  goal        String
  userId      String
  microCycles MicroCycle[]
  events      Event[]
}

model MicroCycle {
  id           String     @id @default(cuid())
  start        DateTime
  end          DateTime
  duration     Int
  name         String
  macroCycleId String
  macroCycle   MacroCycle @relation(fields: [macroCycleId], references: [id])
}

model Event {
  id           String     @id @default(cuid())
  date         DateTime
  name         String
  // info         Json? https://github.com/dskunkler/climbing-journal/issues/54
  info         String?
  macroCycleId String
  macroCycle   MacroCycle @relation(fields: [macroCycleId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(255)
  authorId  String
  createdAt DateTime @default(now())

  @@index([authorId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
